version: "3.8"

x-app-env : &app-env
  environment:
    - NGINX_PORT=${NGINX_PORT:-80}
    - WEB_URL=${WEB_URL:-http://localhost}
    - DEBUG=${DEBUG:-0}
    - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-plane.settings.production} # deprecated
    - NEXT_PUBLIC_DEPLOY_URL=${NEXT_PUBLIC_DEPLOY_URL:-http://localhost/spaces} # deprecated
    - SENTRY_DSN=${SENTRY_DSN:-""}
    - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-"production"}
    - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-""}
    - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-""}
    - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-""}
    - DOCKERIZED=${DOCKERIZED:-1}  # deprecated
    - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-""}
    # Gunicorn Workers
    - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
    #DB SETTINGS
    - PGHOST=${PGHOST:-plane-db}
    - PGDATABASE=${PGDATABASE:-plane}
    - POSTGRES_USER=${POSTGRES_USER:-plane}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-plane}
    - POSTGRES_DB=${POSTGRES_DB:-plane}
    - PGDATA=${PGDATA:-/var/lib/postgresql/data}
    - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PGHOST}/${PGDATABASE}}
    # REDIS SETTINGS
    - REDIS_HOST=${REDIS_HOST:-plane-redis}
    - REDIS_PORT=${REDIS_PORT:-6379}
    - REDIS_URL=${REDIS_URL:-redis://${REDIS_HOST}:6379/}
    # EMAIL SETTINGS - Deprecated can be configured through admin panel
    - EMAIL_HOST=${EMAIL_HOST:-""}
    - EMAIL_HOST_USER=${EMAIL_HOST_USER:-""}
    - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-""}
    - EMAIL_PORT=${EMAIL_PORT:-587}
    - EMAIL_FROM=${EMAIL_FROM:-"Team Plane <team@mailer.plane.so>"}
    - EMAIL_USE_TLS=${EMAIL_USE_TLS:-1}
    - EMAIL_USE_SSL=${EMAIL_USE_SSL:-0}
    - DEFAULT_EMAIL=${DEFAULT_EMAIL:-captain@plane.so}
    - DEFAULT_PASSWORD=${DEFAULT_PASSWORD:-password123}
    # LOGIN/SIGNUP SETTINGS - Deprecated can be configured through admin panel
    - ENABLE_SIGNUP=${ENABLE_SIGNUP:-1}
    - ENABLE_EMAIL_PASSWORD=${ENABLE_EMAIL_PASSWORD:-1}
    - ENABLE_MAGIC_LINK_LOGIN=${ENABLE_MAGIC_LINK_LOGIN:-0}
    # Application secret
    - SECRET_KEY=${SECRET_KEY:-60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5}
    # DATA STORE SETTINGS
    - USE_MINIO=${USE_MINIO:-1}
    - AWS_REGION=${AWS_REGION:-""}
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-"access-key"}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-"secret-key"}
    - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL:-http://plane-minio:9000}
    - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-uploads}
    - MINIO_ROOT_USER=${MINIO_ROOT_USER:-"access-key"}
    - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-"secret-key"}
    - BUCKET_NAME=${BUCKET_NAME:-uploads}
    - FILE_SIZE_LIMIT=${FILE_SIZE_LIMIT:-5242880}
# LDAP Configuration
    - LDAP_ENABLED=${LDAP_ENABLED:-1}
    - LDAP_RESTRICT_GROUP=${LDAP_RESTRICT_GROUP:-0}

# LDAP server URI
    - AUTH_LDAP_SERVER_URI=${AUTH_LDAP_SERVER_URI:-""}

# '1' to use Start TLS, '0' to not use
    - AUTH_LDAP_START_TLS=${AUTH_LDAP_START_TLS:-0}

# DN and Password for binding to the LDAP server (if required)
    - AUTH_LDAP_BIND_DN=${AUTH_LDAP_BIND_DN:-""}
    - AUTH_LDAP_BIND_PASSWORD=${AUTH_LDAP_BIND_PASSWORD:-""}

# Base DN for searching users and the filter string
    - AUTH_LDAP_USER_SEARCH_BASE=${AUTH_LDAP_USER_SEARCH_BASE:-""}
    - AUTH_LDAP_USER_SEARCH_FILTER=${AUTH_LDAP_USER_SEARCH_FILTER:-""}

# Mapping of LDAP user attributes to Django User model fields
    - AUTH_LDAP_USER_ATTR_MAP_USERNAME=${AUTH_LDAP_USER_ATTR_MAP_USERNAME:-""}
    - AUTH_LDAP_USER_ATTR_MAP_EMAIL=${AUTH_LDAP_USER_ATTR_MAP_EMAIL:-""}
    - AUTH_LDAP_USER_ATTR_MAP_FIRST_NAME=${AUTH_LDAP_USER_ATTR_MAP_FIRST_NAME:-""}
    - AUTH_LDAP_USER_ATTR_MAP_LAST_NAME=${AUTH_LDAP_USER_ATTR_MAP_LAST_NAME:-""}

# Base DN for searching groups and the filter string
    - AUTH_LDAP_GROUP_SEARCH_BASE=${AUTH_LDAP_GROUP_SEARCH_BASE:-""}
    - AUTH_LDAP_GROUP_SEARCH_FILTER=${AUTH_LDAP_GROUP_SEARCH_FILTER:-""}

# Group DN required for a user to authenticate
    - AUTH_LDAP_REQUIRE_GROUP=${AUTH_LDAP_REQUIRE_GROUP:-""}


services:
  web:
    <<: *app-env
    image: johannmnn/planeplus-frontend:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    restart: unless-stopped
    command: /usr/local/bin/start.sh web/server.js web
    deploy:
      replicas: ${WEB_REPLICAS:-1}
    depends_on:
      - api
      - worker

  space:
    <<: *app-env
    image: johannmnn/planeplus-space:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    restart: unless-stopped
    command: /usr/local/bin/start.sh space/server.js space
    deploy:
      replicas: ${SPACE_REPLICAS:-1}
    depends_on:
      - api
      - worker
      - web

  api:
    <<: *app-env
    image: johannmnn/planeplus-backend:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    restart: unless-stopped
    command: ./bin/takeoff
    deploy:
      replicas: ${API_REPLICAS:-1}
    depends_on:
      - plane-db
      - plane-redis

  worker:
    <<: *app-env
    image: johannmnn/planeplus-backend:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    restart: unless-stopped
    command: ./bin/worker
    depends_on:
      - api
      - plane-db
      - plane-redis

  beat-worker:
    <<: *app-env
    image: johannmnn/planeplus-backend:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    restart: unless-stopped
    command: ./bin/beat
    depends_on:
      - api
      - plane-db
      - plane-redis

  migrator:
    <<: *app-env
    image: johannmnn/planeplus-backend:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    restart: no
    command: >
        sh -c "python manage.py wait_for_db &&
             python manage.py migrate"
    depends_on:
      - plane-db
      - plane-redis

  plane-db:
    <<: *app-env
    image: postgres:15.2-alpine
    pull_policy: if_not_present
    restart: unless-stopped
    command: postgres -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data
    
  plane-redis:
    <<: *app-env
    image: redis:6.2.7-alpine
    pull_policy: if_not_present
    restart: unless-stopped
    volumes:
      - redisdata:/data

  plane-minio:
    <<: *app-env
    image: minio/minio
    pull_policy: if_not_present
    restart: unless-stopped
    command: server /export --console-address ":9090"
    volumes:
      - uploads:/export

  # Comment this if you already have a reverse proxy running
  proxy:
    <<: *app-env
    image: johannmnn/planeplus-proxy:${APP_RELEASE:-latest}
    pull_policy: ${PULL_POLICY:-always}
    ports:
        - ${NGINX_PORT}:80
    depends_on:
      - web
      - api
      - space

volumes:
  pgdata:
  redisdata:
  uploads:
