APP_RELEASE=stable

WEB_REPLICAS=1
SPACE_REPLICAS=1
ADMIN_REPLICAS=1
API_REPLICAS=1

NGINX_PORT=80
WEB_URL=http://localhost
DEBUG=0
SENTRY_DSN=
SENTRY_ENVIRONMENT=production
CORS_ALLOWED_ORIGINS=http://localhost

#DB SETTINGS
PGHOST=plane-db
PGDATABASE=plane
POSTGRES_USER=plane
POSTGRES_PASSWORD=plane
POSTGRES_DB=plane
POSTGRES_PORT=5432
PGDATA=/var/lib/postgresql/data
DATABASE_URL=

# REDIS SETTINGS
REDIS_HOST=plane-redis
REDIS_PORT=6379
REDIS_URL=

# Secret Key
SECRET_KEY=60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5

# DATA STORE SETTINGS
USE_MINIO=1
AWS_REGION=
AWS_ACCESS_KEY_ID=access-key
AWS_SECRET_ACCESS_KEY=secret-key
AWS_S3_ENDPOINT_URL=http://plane-minio:9000
AWS_S3_BUCKET_NAME=uploads
MINIO_ROOT_USER=access-key
MINIO_ROOT_PASSWORD=secret-key
BUCKET_NAME=uploads
FILE_SIZE_LIMIT=5242880

# Gunicorn Workers
GUNICORN_WORKERS=1

# LDAP Configuration
LDAP_ENABLED=0 # Set to '1' to enable LDAP authentication, '0' to disable
LDAP_RESTRICT_GROUP=0 # Set to '1' to use "AUTH_LDAP_REQUIRE_GROUP" to restrict access to a group, '0' to not use

# LDAP server URI
AUTH_LDAP_SERVER_URI="ldaps://example.com:636"

# '1' to use Start TLS, '0' to not use
AUTH_LDAP_START_TLS=0

# DN and Password for binding to the LDAP server (if required)
AUTH_LDAP_BIND_DN=""
AUTH_LDAP_BIND_PASSWORD=""

# Base DN for searching users and the filter string
AUTH_LDAP_USER_SEARCH_BASE="o=example,c=com"
AUTH_LDAP_USER_SEARCH_FILTER="(|(uid=%(user)s)(mail=%(user)s))"

# Mapping of LDAP user attributes to Django User model fields
AUTH_LDAP_USER_ATTR_MAP_USERNAME="uid"
AUTH_LDAP_USER_ATTR_MAP_EMAIL="mail"
AUTH_LDAP_USER_ATTR_MAP_FIRST_NAME="givenName"
AUTH_LDAP_USER_ATTR_MAP_LAST_NAME="sn"

# Base DN for searching groups and the filter string
AUTH_LDAP_GROUP_SEARCH_BASE="o=example,c=com"
AUTH_LDAP_GROUP_SEARCH_FILTER="(|(cn=*-unit)(cn=admin-*))"

# Group DN required for a user to authenticate
AUTH_LDAP_REQUIRE_GROUP="cn=admin" # "cn=admin,o=example,c=com"